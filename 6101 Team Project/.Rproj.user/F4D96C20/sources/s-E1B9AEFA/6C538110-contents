# Libraries
library (forecast)
library (texreg)
library (kableExtra)


# Upload data from source
unemp <- read.csv("/Users/illiyunaislam/Desktop/TS Midterm/UNRATE.csv")
gdp <- read.csv("GDPINDEX.csv")
lfp <- read.csv("LFPRATE.csv")
fed <- read.csv("FEDFUNDS.csv")


# Combine all the variables into one data frame (REMOVED NA's automatically)
df <- Reduce(function(x,y) merge(x = x, y = y, by = "DATE"), 
                   list(unemp, gdp, lfp, fed))


# Rename columns for ease 
names(df) <- c('date', 'unemp', 'gdp', 'lfp','fed')

# Removing observations for 2020 and 2021

new_df<- head(df,-23)

#Summary Statistics of each variable 
summary (df)
summary(new_df)



###########  UNEMPLOYMENT ####################

intord(new_df$unemp)


# Summary of Variables after determining stationarity

unemp_diff <- diff(new_df$unemp)
summary(unemp)
summary (unemp_diff)

# Separating training and testing sets of variables 

unemp_train <- ts(unemp_diff[1:(length(unemp_diff)-10)], start = c(1960-01-01,1), freq = 12)
unemp_test <- tail(unemp_diff,10)

# Choosing a model (ACF/PACF)

par(mfrow=c(1,2))
acf(unemp_train, lag.max = 36)
pacf(unemp_train, lag.max = 36)

# Model Regressions

reg1_unemp <- Arima (unemp_train, order = c(9, 0, 4),
                     include.mean = F,
                     include.constant = F,
                     include.drift = F) 

summary (reg1_unemp)

reg2_unemp <- Arima (unemp_train, order = c(4, 0, 2),
                     include.mean = F,
                     include.constant = F,
                     include.drift = F) 

summary (reg2_unemp)

reg3_unemp <- Arima (unemp_train, order = c(3, 0, 2),
                     include.mean = F,
                     include.constant = F,
                     include.drift = F) 

summary (reg3_unemp)

unemp_auto<- auto.arima(unemp_train, ic = 'bic')
summary (unemp_auto)

unemp_table <- htmlreg(list(reg1_unemp, reg2_unemp, reg3_unemp,unemp_auto), doctype = TRUE, file = "Unemp.html")

# Checking for Serial correlation 
Box.test(reg1_unemp$residuals, lag = 36, type = "Ljung-Box")
Box.test(reg2_unemp$residuals, lag = 36, type = "Ljung-Box")
Box.test(reg3_unemp$residuals, lag = 36, type = "Ljung-Box")
Box.test(unemp_auto$residuals, lag = 36, type = "Ljung-Box")

# Checking for Seasonality 

par(mfrow = c(1, 3)) 
plot(reg1_unemp$residuals) 
acf (reg1_unemp$residuals) 
pacf(reg1_unemp$residuals)

par(mfrow = c(1, 3)) 
plot(reg2_unemp$residuals) 
acf (reg2_unemp$residuals) 
pacf(reg2_unemp$residuals)

par(mfrow = c(1, 3)) 
plot(reg3_unemp$residuals,lag.max=40) 
acf (reg3_unemp$residuals,lag.max=40) 
pacf(reg3_unemp$residuals,lag.max=40)

par(mfrow = c(1, 3)) 
plot(unemp_auto$residuals,lag.max=40) 
acf (unemp_auto$residuals,lag.max=40) 
pacf(unemp_auto$residuals,lag.max=40)

# Forecasting Unemployment 

forecast_reg1_unemp <- predict(reg1_unemp, n.ahead = 10) 
forecast_reg2_unemp <- predict(reg2_unemp, n.ahead = 10)
forecast_reg3_unemp <- predict(reg3_unemp, n.ahead = 10) 
forecast_unemp_auto <- predict(unemp_auto, n.ahead = 10)

# Plotting Forecasts of Unemployment  

unemp_forecast <- cbind(unemp_test, 
                        forecast_reg1_unemp$pred, 
                        forecast_reg2_unemp$pred,
                        forecast_reg3_unemp$pred,
                        forecast_unemp_auto$pred)
nn <- ncol(unemp_forecast) 

layout(matrix(c(1,2),nrow=1), width=c(4,1))
par(mar=c(5,4,4,0))
matplot(unemp_forecast,type="l", col = c(1, 2, 3, 4,5), lwd = c(3, 2, 2, 2)) 

# Legend
par(mar=c(5,0,4,2))
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("center", colnames(unemp_forecast),col=seq_len(nn),cex=0.8,fill=seq_len(nn))


#Loss Functions

rmse <- function(pred, true) {
  rmse <- sqrt(mean((pred - true)^2)) 
  return(rmse)
}

rmae <- function(pred, true) {
  rmae <- sqrt(mean(abs(pred - true)))
  return(rmae) }

unemp_loss <- cbind(forecast_reg1_unemp$pred, 
                    forecast_reg2_unemp$pred,
                    forecast_reg3_unemp$pred,
                    forecast_unemp_auto$pred)

rmse_all <- apply(unemp_loss, 2, function(x) {rmse(x, unemp_test)}) 
rmae_all <- apply(unemp_loss, 2, function(x) {rmae(x, unemp_test)})

loss_table <- cbind(rmse_all,rmae_all)

loss_table %>%
  kbl(caption=" Loss Values of Unemployment Models",
      format= "html",
      col.names = c("RMSE",
                    "RMAE"),
      align="r") %>%
  kable_classic(full_width = F, html_font = "garamond")

# Upper/ Lower Bounds 
unemp_u95 <- forecast_unemp_auto$pred + 1.96*forecast_unemp_auto$se
unemp_l95 <- forecast_unemp_auto$pred - 1.96*forecast_unemp_auto$se

unemp_Q5<- cbind(unemp_test, forecast_unemp_auto$pred, unemp_u95,unemp_l95)

nn <- ncol(unemp_Q5)
layout(matrix(c(1,2),nrow=1), width=c(4,1))
par(mar=c(5,4,4,0))
matplot(unemp_Q5,type="l", col = c(1, 2, 3, 4), lwd = c(3, 2, 2, 2))
par(mar=c(5,0,4,2))
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("center", colnames(unemp_Q5),col=seq_len(nn),cex=0.8,fill=seq_len(nn))

# Composite Forecast
avg_forecast_unemp <- rowMeans(unemp_loss) 
cbind(avg_forecast_unemp, unemp_loss)

# Graph with Composite Forecast 
rmse(avg_forecast_unemp, unemp_test) 
rmae(avg_forecast_unemp, unemp_test)

unemp_Q6 <- cbind(unemp_test, forecast_unemp_auto$pred, unemp_u95,unemp_l95,
                  avg_forecast_unemp)

nn <- ncol(unemp_Q6 )
layout(matrix(c(1,2),nrow=1), width=c(4,1))
par(mar=c(5,4,4,0))
matplot(unemp_Q6 ,type="l", col = c(1, 2, 3, 4,5), lwd = c(3, 2, 2, 2))
par(mar=c(5,0,4,2))
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("center", colnames(unemp_Q6 ),col=seq_len(nn),cex=0.8,fill=seq_len(nn))

# Loss Values with Composites

unemp_avg_rmse <- as.data.frame(rmse(avg_forecast_unemp, unemp_test))
unemp_avg_rmae <- as.data.frame(rmae(avg_forecast_unemp, unemp_test))

final_unemp_table <- cbind(rmse_all,
                           rmae_all,
                           unemp_avg_rmse, 
                           unemp_avg_rmae) 


final_unemp_table %>% 
  kbl(caption="Composite & Individual Model Loss Values for Unemployment",
      format= "html",
      col.names = c("RMSE",
                    "RMAE",
                    "Average RMSE", 
                    "Average RMAE"),
      align="r") %>%
  kable_classic(full_width = F, html_font = "garamond")


##################################################################################

#####################  LABOUR FORCE PARTICIPATION #################

intord(new_df$lfp)

# Summary of Variables after determining stationarity

lfp_diff <- diff(new_df$lfp)
summary (new_df$lfp)
summary (lfp_diff)

# Separating training and testing sets of variables 

lfp_train <- ts(lfp_diff[1:(length(lfp_diff)-10)], start = c(1960-01-01,1), freq = 12)
lfp_test <- tail(lfp_diff,10)

# Choosing a model (ACF/PACF)

par(mfrow=c(1,2))
acf(lfp_train, lag.max = 50)
pacf(lfp_train, lag.max = 50)

# LFP Model Regressions

reg1_lfp <- Arima (lfp_train, order = c(0, 0, 3),
                     include.mean = F,
                     include.constant = F,
                     include.drift = F) 

summary (reg1_lfp)

reg2_lfp <- Arima (lfp_train, order = c(0, 0, 2),
                     include.mean = F,
                     include.constant = F,
                     include.drift = F) 

summary (reg2_lfp)

reg3_lfp <- Arima (lfp_train, order = c(0, 0, 1),
                     include.mean = F,
                     include.constant = F,
                     include.drift = F) 

summary (reg3_lfp)


lfp_table <- htmlreg(list(reg1_lfp, reg2_lfp, reg3_lfp), doctype = TRUE, file = "lfp.html")

# Checking for Serial correlation 
Box.test(reg1_lfp$residuals, lag = 36, type = "Ljung-Box")
Box.test(reg2_lfp$residuals, lag = 36, type = "Ljung-Box")
Box.test(reg3_lfp$residuals, lag = 36, type = "Ljung-Box")

# Checking for Seasonality 
par(mfrow = c(1, 3)) 
plot(reg1_lfp$residuals) 
acf (reg1_lfp$residuals) 
pacf(reg1_lfp$residuals)

par(mfrow = c(1, 3)) 
plot(reg2_lfp$residuals) 
acf (reg2_lfp$residuals) 
pacf(reg2_lfp$residuals)

par(mfrow = c(1, 3)) 
plot(reg3_lfp$residuals) 
acf (reg3_lfp$residuals) 
pacf(reg3_lfp$residuals)

# Plotting Forecasts of LFP  
forecast_reg1_lfp <- predict(reg1_lfp, n.ahead = 10) 
forecast_reg2_lfp <- predict(reg2_lfp, n.ahead = 10)
forecast_reg3_lfp <- predict(reg3_lfp, n.ahead = 10)

lfp_forecast <- cbind(lfp_test, 
                        forecast_reg1_lfp$pred, 
                        forecast_reg2_lfp$pred,
                        forecast_reg3_lfp$pred)
                        
nn <- ncol(lfp_forecast) 

layout(matrix(c(1,2),nrow=1), width=c(4,1))
par(mar=c(5,4,4,0))
matplot(lfp_forecast,type="l", col = c(1, 2, 3, 4,5), lwd = c(3, 2, 2, 2)) 

# Legend
par(mar=c(5,0,4,2))
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("center", colnames(lfp_forecast),col=seq_len(nn),cex=0.8,fill=seq_len(nn))

#Loss Functions

lfp_loss <- cbind(forecast_reg1_lfp$pred, 
                  forecast_reg2_lfp$pred,
                  forecast_reg3_lfp$pred)

rmse_all <- apply(lfp_loss, 2, function(x) {rmse(x, lfp_test)}) 
rmae_all <- apply(lfp_loss, 2, function(x) {rmae(x, lfp_test)})

loss_table <- cbind(rmse_all,rmae_all)

loss_table %>%
  kbl(caption=" Loss Values of LFP Models",
      format= "html",
      col.names = c("RMSE",
                    "RMAE"),
      align="r") %>%
  kable_classic(full_width = F, html_font = "garamond")

# Upper/ Lower Bounds 
lfp_u95 <- forecast_reg3_lfp$pred + 1.96*forecast_reg3_lfp$se
lfp_l95 <- forecast_reg3_lfp$pred - 1.96*forecast_reg3_lfp$se

lfp_Q5<- cbind(lfp_test, forecast_reg3_lfp$pred, lfp_u95,lfp_l95)

nn <- ncol(lfp_Q5)
layout(matrix(c(1,2),nrow=1), width=c(4,1))
par(mar=c(5,4,4,0))
matplot(lfp_Q5,type="l", col = c(1, 2, 3, 4), lwd = c(3, 2, 2, 2))
par(mar=c(5,0,4,2))
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("center", colnames(lfp_Q5),col=seq_len(nn),cex=0.8,fill=seq_len(nn))

# Composite Forecast
avg_forecast_lfp <- rowMeans(lfp_loss) 

# Table of composite & loss values

lfp_avg_rmse <- as.data.frame(rmse(avg_forecast_lfp, lfp_test))
lfp_avg_rmae <- as.data.frame(rmae(avg_forecast_lfp, lfp_test))

final_lfp_table <- cbind(rmse_all,
                         rmae_all,
                         lfp_avg_rmse, 
                         lfp_avg_rmae) 
                         

final_lfp_table %>% 
  kbl(caption = "Composite & Individual Model Loss Values",
      format= "html",
      col.names = c("RMSE",
                    "RMAE",
                    "Average RMSE", 
                    "Average RMAE"),
      align="r") %>%
  kable_classic(full_width = F, html_font = "garamond")

# Graph of composite
rmse(avg_forecast_lfp, lfp_test) 
rmae(avg_forecast_lfp, lfp_test)

lfp_Q6 <- cbind(lfp_test, 
                forecast_reg3_lfp$pred, lfp_u95,lfp_l95,
                avg_forecast_lfp )

nn <- ncol(lfp_Q6 )
layout(matrix(c(1,2),nrow=1), width=c(4,1))
par(mar=c(5,4,4,0))
matplot(lfp_Q6 ,type="l", col = c(1, 2, 3, 4,5), lwd = c(3, 2, 2, 2))
par(mar=c(5,0,4,2))
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("center", colnames(lfp_Q6 ),col=seq_len(nn),cex=0.8,fill=seq_len(nn))


##################################################################################

######           FEDERAL FUNDS RATE              #####


# Evidence of Stationarity

intord(new_df$fed)

# Summary of Variables after determining stationarity

fed_diff <- diff(new_df$fed)
summary(new_df$fed)
summary (fed_diff)

# Separating training and testing sets of variables 

fed_train <-  ts(fed_diff[1:(length(fed_diff)-10)], start = c(1960-01-01,1), freq = 12)
fed_test <- tail(fed_diff,10)

# Choosing a model (ACF/PACF)

par(mfrow=c(1,2))
acf (fed_train, lag.max = 40)
pacf(fed_train, lag.max = 40)

# fed Funds Model Regressions

reg1_fed <- Arima (fed_train, order = c(0, 0, 4),
                   include.mean = F,
                   include.constant = F,
                   include.drift = F) 

summary (reg1_fed)

reg2_fed <- Arima (fed_train, order = c(0, 0, 1),
                   include.mean = F,
                   include.constant = F,
                   include.drift = F) 

summary (reg2_fed)


fed_auto<- auto.arima(fed_train, ic = 'bic')
summary (fed_auto)


fed_table <- htmlreg(list(reg1_fed, 
                          reg2_fed, 
                          fed_auto), doctype = TRUE, file = "fed.html")

# Checking for Serial correlation 
Box.test(reg1_fed$residuals, lag = 36, type = "Ljung-Box")
Box.test(reg2_fed$residuals, lag = 36, type = "Ljung-Box")
Box.test(fed_auto$residuals, lag = 36, type = "Ljung-Box")


# Checking for Seasonality 
par(mfrow = c(1, 3)) 
plot(reg1_fed$residuals) 
acf (reg1_fed$residuals) 
pacf(reg1_fed$residuals)

par(mfrow = c(1, 3)) 
plot(reg2_fed$residuals) 
acf (reg2_fed$residuals) 
pacf(reg2_fed$residuals)

par(mfrow = c(1, 3)) 
plot(fed_auto$residuals) 
acf (fed_auto$residuals) 
pacf(fed_auto$residuals)


# Forecasting fed
forecast_reg1_fed <- predict(reg1_fed, n.ahead = 10) 
forecast_reg2_fed <- predict(reg2_fed, n.ahead = 10)
forecast_fed_auto <- predict(fed_auto, n.ahead = 10) 

# Plotting Forecasts 

fed_forecast <- cbind ( fed_test,
                       forecast_reg1_fed$pred, 
                       forecast_reg2_fed$pred,
                       forecast_fed_auto$pred)
                    

nn <- ncol(fed_forecast) 

layout(matrix(c(1,2),nrow=1), width=c(4,1))
par(mar=c(5,4,4,0))
matplot(fed_forecast,type="l", col = c(1, 2, 3, 4, 5), lwd = c(3, 2, 2, 2), ylim= c(-1,1)) 

# Legend
par(mar=c(5,0,4,2))
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("center", colnames(fed_forecast),col=seq_len(nn),cex=0.8,fill=seq_len(nn))

#Loss Functions

fed_loss <- cbind(forecast_reg1_fed$pred, 
                  forecast_reg2_fed$pred,
                  forecast_fed_auto$pred)

rmse_all <- apply(fed_loss, 2, function(x) {rmse(x, fed_test)}) 
rmae_all <- apply(fed_loss, 2, function(x) {rmae(x, fed_test)})

loss_table <- cbind(rmse_all,rmae_all)

loss_table %>%
  kbl(caption=" Loss Values of FFR Models",
      format= "html",
      col.names = c("RMSE",
                    "RMAE"),
      align="r") %>%
  kable_classic(full_width = F, html_font = "garamond")

# Upper/ Lower Bounds 
fed_u95 <- forecast_fed_auto$pred + 1.96*forecast_fed_auto$se
fed_l95 <- forecast_fed_auto$pred - 1.96*forecast_fed_auto$se

fed_Q5<- cbind(fed_test, forecast_fed_auto$pred, fed_u95,fed_l95)

nn <- ncol(fed_Q5)
layout(matrix(c(1,2),nrow=1), width=c(4,1))
par(mar=c(5,4,4,0))
matplot(fed_Q5,type="l", col = c(1, 2, 3, 4), lwd = c(3, 2, 2, 2))
par(mar=c(5,0,4,2))
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("center", colnames(fed_Q5),col=seq_len(nn),cex=0.8,fill=seq_len(nn))

# Composite Forecast
avg_forecast_fed <- rowMeans(fed_loss) 

# Table of composite & loss values

fed_avg_rmse <- as.data.frame(rmse(avg_forecast_fed, fed_test))
fed_avg_rmae <- as.data.frame(rmae(avg_forecast_fed, fed_test))

final_fed_table <- cbind(rmse_all,
                         rmae_all,
                         fed_avg_rmse, 
                         fed_avg_rmae) 


final_fed_table %>% 
  kbl(caption = "Composite & Individual Model Loss Values",
    format= "html",
      col.names = c("RMSE",
                    "RMAE",
                    "Average RMSE", 
                    "Average RMAE"),
      align="r") %>%
  kable_classic(full_width = F, html_font = "garamond")

# Graph of composite
rmse(avg_forecast_fed, fed_test) 
rmae(avg_forecast_fed, fed_test)

fed_Q6 <- cbind(fed_test, 
                forecast_fed_auto$pred, 
                fed_u95,
                fed_l95,
                avg_forecast_fed )

nn <- ncol(fed_Q6 )
layout(matrix(c(1,2),nrow=1), width=c(4,1))
par(mar=c(5,4,4,0))
matplot(fed_Q6 ,type="l", col = c(1, 2, 3, 4,5), lwd = c(3, 2, 2, 2))
par(mar=c(5,0,4,2))
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("center", colnames(fed_Q6 ),col=seq_len(nn),cex=0.8,fill=seq_len(nn))

###############################################################################

###               GROSS DOMESTIC PRODUCT        #########

# Evidence of Stationarity

intord(new_df$gdp)

# Summary of Variables after determining stationarity

gdp_diff <- diff(diff(new_df$gdp))
summary (gdp_diff)

# Separating training and testing sets of variables 

gdp_train <-  ts(gdp_diff[1:(length(gdp_diff)-10)], start = c(1960-01-01,1), freq = 12)
gdp_test <- tail(gdp_diff,10)

# Choosing a model (ACF/PACF)

par(mfrow=c(1,2))
acf (gdp_train, lag.max = 36)
pacf(gdp_train, lag.max = 36)

# GDP Model Regressions

reg1_gdp <- Arima (gdp_train, order = c(5, 0, 0),
                   include.mean = F,
                   include.constant = F,
                   include.drift = F) 

summary (reg1_gdp)

reg2_gdp <- Arima (gdp_train, order = c(5, 0, 4),
                   include.mean = F,
                   include.constant = F,
                   include.drift = F) 

summary (reg2_gdp)


gdp_auto<- auto.arima(gdp_train, ic = 'bic')
summary (gdp_auto)


gdp_table <- htmlreg(list(reg1_gdp, 
                          reg2_gdp, 
                          gdp_auto), doctype = TRUE, file = "gdp.html")

# Checking for Serial correlation 
Box.test(reg1_gdp$residuals, lag = 36, type = "Ljung-Box")
Box.test(reg2_gdp$residuals, lag = 36, type = "Ljung-Box")
Box.test(gdp_auto$residuals, lag = 36, type = "Ljung-Box")


# Checking for Seasonality 
par(mfrow = c(1, 3)) 
plot(reg1_gdp$residuals) 
acf (reg1_gdp$residuals) 
pacf(reg1_gdp$residuals)

par(mfrow = c(1, 3)) 
plot(reg2_gdp$residuals) 
acf (reg2_gdp$residuals) 
pacf(reg2_gdp$residuals)

par(mfrow = c(1, 3)) 
plot(gdp_auto$residuals) 
acf (gdp_auto$residuals) 
pacf(gdp_auto$residuals)


# Forecasting GDP
forecast_reg1_gdp <- predict(reg1_gdp, n.ahead = 10) 
forecast_reg2_gdp <- predict(reg2_gdp, n.ahead = 10)
forecast_gdp_auto <- predict(gdp_auto, n.ahead = 10) 

gdp_forecast <- cbind(gdp_test, 
                      forecast_reg1_gdp$pred, 
                      forecast_reg2_gdp$pred,
                      forecast_gdp_auto$pred)
                        

nn <- ncol(gdp_forecast) 

layout(matrix(c(1,2),nrow=1), width=c(4,1))
par(mar=c(5,4,4,0))
matplot(gdp_forecast,type="l", col = c(1, 2, 3, 4,5), lwd = c(3, 2, 2, 2)) 

# Legend
par(mar=c(5,0,4,2))
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("center", colnames(gdp_forecast),col=seq_len(nn),cex=0.8,fill=seq_len(nn))

#Loss Functions

gdp_loss <- cbind(forecast_reg1_gdp$pred, 
                  forecast_reg2_gdp$pred,
                  forecast_gdp_auto$pred)

rmse_all <- apply(gdp_loss, 2, function(x) {rmse(x, gdp_test)}) 
rmae_all <- apply(gdp_loss, 2, function(x) {rmae(x, gdp_test)})

loss_table <- cbind(rmse_all,rmae_all)

loss_table %>%
  kbl(caption=" Loss Values of GDP Models",
      format= "html",
      col.names = c("RMSE",
                    "RMAE"),
      align="r") %>%
  kable_classic(full_width = F, html_font = "garamond")

# Upper/ Lower Bounds 
gdp_u95 <- forecast_reg2_gdp$pred + 1.96*forecast_reg2_gdp$se
gdp_l95 <- forecast_reg2_gdp$pred - 1.96*forecast_reg2_gdp$se

gdp_Q5<- cbind(gdp_test, forecast_reg2_gdp$pred, gdp_u95,gdp_l95)

nn <- ncol(gdp_Q5)
layout(matrix(c(1,2),nrow=1), width=c(4,1))
par(mar=c(5,4,4,0))
matplot(gdp_Q5,type="l", col = c(1, 2, 3, 4), lwd = c(3, 2, 2, 2))
par(mar=c(5,0,4,2))
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("center", colnames(gdp_Q5),col=seq_len(nn),cex=0.8,fill=seq_len(nn))

# Composite Forecast
avg_forecast_gdp <- rowMeans(gdp_loss) 

# Table of composite & loss values

gdp_avg_rmse <- as.data.frame(rmse(avg_forecast_gdp, gdp_test))
gdp_avg_rmae <- as.data.frame(rmae(avg_forecast_gdp, gdp_test))

final_gdp_table <- cbind(rmse_all,
                         rmae_all,
                         gdp_avg_rmse, 
                         gdp_avg_rmae) 


final_gdp_table %>% 
  kbl(caption = "Composite & Individual Model Loss Values of GDP",
    format= "html",
      col.names = c("RMSE",
                    "RMAE",
                    "Average RMSE", 
                    "Average RMAE"),
      align="r") %>%
  kable_classic(full_width = F, html_font = "garamond")

# Graph of composite
rmse(avg_forecast_gdp, gdp_test) 
rmae(avg_forecast_gdp, gdp_test)

gdp_Q6 <- cbind(gdp_test, 
                forecast_reg2_gdp$pred, gdp_u95,gdp_l95,
                avg_forecast_gdp )

nn <- ncol(gdp_Q6 )
layout(matrix(c(1,2),nrow=1), width=c(4,1))
par(mar=c(5,4,4,0))
matplot(gdp_Q6 ,type="l", col = c(1, 2, 3, 4,5), lwd = c(3, 2, 2, 2))
par(mar=c(5,0,4,2))
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("center", colnames(gdp_Q6 ),col=seq_len(nn),cex=0.8,fill=seq_len(nn))
